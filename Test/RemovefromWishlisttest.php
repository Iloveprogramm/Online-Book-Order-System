<?php
use PHPUnit\Framework\TestCase;

class RemoveFromWishlistTest extends TestCase
{
    public function testRemoveFromWishlistSuccess()
    {
        // Mock the necessary session data and $_GET parameters
        $_SESSION['username'] = 'testuser';
        $_GET['book_id'] = 123; // Replace with a book ID that you want to remove from the wishlist

        // Start output buffering to capture the script's output
        ob_start();

        // Include the 'remove-from-Wishlist.php' script
        require 'remove-from-Wishlist.php';

        // Capture the output (JSON response) generated by the script
        $output = ob_get_clean();

        // Assertions to check if the response is as expected
        $expectedResponse = [
            "status" => "success",
            "message" => "Book successfully removed from your wishlist."
        ];

        $this->assertJsonStringEqualsJsonString(json_encode($expectedResponse), $output);
    }

    public function testRemoveFromWishlistNotInWishlist()
    {
        // Mock the necessary session data and $_GET parameters
        $_SESSION['username'] = 'testuser';
        $_GET['book_id'] = 456; // Replace with a book ID that is not in the wishlist

        // Start output buffering to capture the script's output
        ob_start();

        // Include the 'remove-from-Wishlist.php' script
        require 'remove-from-Wishlist.php';

        // Capture the output (JSON response) generated by the script
        $output = ob_get_clean();

        // Assertions to check if the response is as expected
        $expectedResponse = [
            "status" => "info",
            "message" => "This book is not in your wishlist."
        ];

        $this->assertJsonStringEqualsJsonString(json_encode($expectedResponse), $output);
    }

    public function testRemoveFromWishlistError()
    {
        // Mock the necessary session data and $_GET parameters
        $_SESSION['username'] = 'testuser';
        $_GET['book_id'] = 789; // Replace with a book ID

        // Mock the database interaction to simulate a database error
        $mockStmt = $this->createMock(mysqli_stmt::class);
        $mockStmt->method('execute')->willReturn(false);

        $mockConn = $this->createMock(mysqli::class);
        $mockConn->method('prepare')->willReturn($mockStmt);

        // Replace the actual database connection with the mock connection
        $conn = $mockConn;

        // Start output buffering to capture the script's output
        ob_start();

        // Include the 'remove-from-Wishlist.php' script
        require 'remove-from-Wishlist.php';

        // Capture the output (JSON response) generated by the script
        $output = ob_get_clean();

        // Assertions to check if the response is as expected
        $expectedResponse = [
            "status" => "error",
            "message" => "Error removing book from your wishlist: Database error."
        ];

        $this->assertJsonStringEqualsJsonString(json_encode($expectedResponse), $output);
    }
}
?>